import React, { useState } from 'react'
import ReactDOM from 'react-dom/client';
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import axios, { } from 'axios';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';


// Types
type NullableType<T> = null | T

type LoginFieldsType = {
    email: string
    password: string
}

// API
const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})

const api = {
    login(data: LoginFieldsType) {
        return instance.post('auth/login', data)
    },
}


// Reducer
const initState = {
    isLoading: false,
    error: null as NullableType<string>,
    isLoggedIn: false,
}

type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case 'APP/SET-IS-LOGGED-IN':
            return {...state, isLoggedIn: action.isLoggedIn}
        case 'APP/IS-LOADING':
            return {...state, isLoading: action.isLoading}
        case 'APP/SET-ERROR':
            return {...state, error: action.error}
        default:
            return state
    }
}

// Actions
const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
type ActionsType = | ReturnType<typeof setIsLoggedIn> | ReturnType<typeof setLoadingAC> | ReturnType<typeof setError>

// Thunk
const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))
    api.login(values)
        .then((res) => {
            dispatch(setIsLoggedIn(true))
            alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')

        })
        .catch((e) => {
        })
        .finally(() => {
            dispatch(setLoadingAC(false))
        })
}

// Store
const rootReducer = combineReducers({
    app: appReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
export const Loader = () => {
    return <h1>Loading ...</h1>
}

// App
export const App = () => {

    const dispatch = useAppDispatch()

    const [form, setForm] = useState<LoginFieldsType>({email: '', password: ''})

    const error = useAppSelector(state => state.app.error)
    const isLoading = useAppSelector(state => state.app.isLoading)

    const changeFormValuesHandler = (e: React.ChangeEvent<HTMLInputElement>, field: string) => {
        if (field === 'email') {
            setForm({...form, email: e.currentTarget.value})
        }
        if (field === 'password') {
            setForm({...form, password: e.currentTarget.value})
        }
    };

    const submitForm = (e: React.MouseEvent<HTMLButtonElement>) => {
        e.preventDefault()
        dispatch(loginTC(form))
    };

    return (
        <div>
            {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
            {isLoading && <Loader/>}
            <form>
                <div>
                    <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
                           value={form.email}
                           onChange={(e) => changeFormValuesHandler(e, 'email')}
                    />
                </div>
                <div>
                    <input type={'password'}
                           placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
                           value={form.password}
                           onChange={(e) => changeFormValuesHandler(e, 'password')}
                    />
                </div>
                <button type="submit" onClick={submitForm}>–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
            </form>
        </div>
    );
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

//üìú –û–ø–∏—Å–∞–Ω–∏–µ:

//–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// –£ –≤–∞—Å —ç—Ç–æ –Ω–∞–≤—Ä—è–¥ –ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è üòà, —Ç.–∫. –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.
// –û—Ç–∫—Ä–æ–π—Ç–µ Network –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.
// –ó–∞–¥–∞—á–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
// –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–æ–≤–æ—Ä—è—â—É—é –æ —Ç–æ–º —á—Ç–æ email –∏–ª–∏ password –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
// ‚ùó –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –Ω–µ –Ω–∞–¥–æ, —Ç.–∫. —Ç–∞–º –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω—é–∞–Ω—Å–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É–∑–Ω–∞–µ—Ç–µ –ø–æ–∑–∂–µ
// **üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch('Error message')**